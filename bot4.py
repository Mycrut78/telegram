import nest_asyncio
nest_asyncio.apply()
import random
import asyncio
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import openai
from openai import AsyncOpenAI


from dotenv import load_dotenv
import os
import logging

load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = "https://telegram-l27s.onrender.com"
client = AsyncOpenAI(api_key=openai.api_key)


logging.basicConfig(level=logging.INFO)

chat_users = set()  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞

arsenals = {
    "üî• –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–∏–∫–æ–ª—ã –∏ –∫–∞–π—Ñ–æ–≤—ã–µ –¥–≤–∏–∂—É—Ö–∏": [
        "üòÇ –ó–∞–ª–∏–ø–Ω–∏ –Ω–∞ –º–µ–º–∞—Ö ‚Äî –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Å–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∏ –∏ —Å–º–µ–π—Å—è –¥–æ —Å–ª—ë–∑.",
        "üì∫ –í–±–µ–π –≤ YouTube ¬´How to‚Ä¶¬ª –∏ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ ‚Äî —É—á–∏—Å—å —Ñ–µ—Ö—Ç–æ–≤–∞—Ç—å –º–æ—Ä–∫–æ–≤–∫–æ–π –∏–ª–∏ –∑–∞–≤—è–∑—ã–≤–∞—Ç—å –≥–∞–ª—Å—Ç—É–∫.",
        "üéØ –ü–æ–∏—â–∏ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –≤ –¢–∏–∫–¢–æ–∫–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–µ—è—Ç—å—Å—è.",
        "üç™ –ù–∞–π–¥–∏ —Å–∞–º—ã–π —Å—Ç—Ä–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–∞ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, –∫–∞–∫ —ç—Ç–æ –Ω–∞ –≤–∫—É—Å.",
        "‚è± –ó–∞–ø—É—Å—Ç–∏ —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç –∏ –ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ç—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–º-–µ–¥–∏–Ω–æ—Ä–æ–≥–æ–º.",
        "üé≤ –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø—Ä–∏–¥—É–º–∞—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—É —Å —Ö–∞–æ—Å–æ–º –∏ –±–µ–∑ –ø—Ä–∞–≤–∏–ª ‚Äî —Å–∫—É–∫–∞ —É–±–µ–∂–∏—Ç!",
        "üé∂ –í–∫–ª—é—á–∏ –ø–µ—Å–Ω–∏ 80-—Ö –Ω–∞ –ø–æ–≤—Ç–æ—Ä –∏ —Ç–∞–Ω—Ü—É–π –∫–∞–∫ –∑–≤–µ–∑–¥–∞ MTV, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–æ–º–∞ –æ–¥–∏–Ω.",
        "ü¶∏‚Äç‚ôÇÔ∏è –ü—Ä–æ–π–¥–∏ –∞–±—Å—É—Ä–¥–Ω—ã–π —Ç–µ—Å—Ç ¬´–∫–∞–∫–æ–π —Ç—ã —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π¬ª ‚Äî —Å—é—Ä–ø—Ä–∏–∑ –∏ —Å–º–µ—Ö –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã.",
        "üìù –ù–∞–ø–∏—à–∏ —Å–∞–º—ã–π –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –º–∏—Ä–µ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É –∏ –Ω–µ –ø–æ–ø–∞—Å—Ç—å—Å—è."
    ],
    "üß† –î–ª—è —É–º–∞ –∏ –ª—ë–≥–∫–æ–π –ø—Ä–æ–∫–∞—á–∫–∏": [
        "üìö –£—á–∏—Å—å 30 –º–∏–Ω—É—Ç ‚Äî –∫–æ–¥, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ—á–µ–º—É —è–ø–æ–Ω—Ü—ã –ª—é–±—è—Ç —Ö–∞–π-—Ç–µ–∫ —Ç—É–∞–ª–µ—Ç—ã.",
        "üåê –õ–∏—Å—Ç–∞–π —Å–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ ‚Äî –æ—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –æ—Å—å–º–∏–Ω–æ–≥–æ–≤-–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω –∏–ª–∏ –ª—è–≥—É—à–µ–∫-–ø—Ä—è—Ç–æ–∫.",
        "üé≤ –î–µ–ª–∞–π —ç—Ç–æ —Ä–∏—Ç—É–∞–ª–æ–º ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤–∞—è —Ç–µ–º–∞, –∏ –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞—è.",
        "üß© –ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –Ω–∞ IQ –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ‚Äî —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –∑–∞–≥–∞–¥–∫–∞ –¥–ª—è —Å–µ–±—è.",
        "ü™û –û–±—ä—è—Å–Ω–∏ —Å–ª–æ–∂–Ω—É—é —Ç–µ–º—É —Å–µ–±–µ –≤ –∑–µ—Ä–∫–∞–ª–æ —Å –ø–∞—É–∑–∞–º–∏ –Ω–∞ —Å–º–µ—Ö –∏ ¬´–¥–∞ –Ω—É –Ω–∞—Ñ–∏–≥¬ª.",
        "üéß –í–∫–ª—é—á–∏ –ø–æ–¥–∫–∞—Å—Ç –ø–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Ç–µ–º–µ –∏ –∏—â–∏ –∑–∞–±–∞–≤–Ω—ã–π —Ñ–∞–∫—Ç, —á—Ç–æ–±—ã —É–¥–∏–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.",
        "ü§Ø –ü–æ–∏—â–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å–ª–æ–≤–æ ¬´–ø–∞—Ä–∞–¥–æ–∫—Å¬ª –∏ —É–¥–∏–≤–ª—è–π—Å—è —ç—Ç–æ–º—É –±–µ–∑—É–º–∏—é.",
        "üåü –°–¥–µ–ª–∞–π –∫–∞—Ä—Ç—É –∂–µ–ª–∞–Ω–∏–π —Å –¥–∏–∫–∏–º–∏ –º–µ—á—Ç–∞–º–∏ ‚Äî –ø–æ–ª–µ—Ç –Ω–∞ –õ—É–Ω—É, –¥—Ä—É–∂–±–∞ —Å –¥—Ä–∞–∫–æ–Ω–æ–º –∏ –ø—Ä–æ—á–µ–µ."
    ],
    "üé≠ –ê—Ä—Ç –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –±–µ–∑ –Ω–∞–ø—Ä—è–≥–∞": [
        "üöÄ –ù–∞–ø–∏—à–∏ —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –∫–æ—Ä–æ–≤—É, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–∞–µ—Ç –≥–∞–ª–∞–∫—Ç–∏–∫—É ‚Äî –±—É–¥—å —Å—Ç—Ä–∞–Ω–Ω—ã–º –∏ —Å–º–µ—à–Ω—ã–º.",
        "üçï –ù–∞–ø–∏—à–∏ —Å—Ç–∏—à–æ–∫ –æ –ø–∏—Ü—Ü–µ –∏ –≤–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏ ‚Äî –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Å–º–µ—Ö–∞.",
        "‚úçÔ∏è –ù–∞—Ä–∏—Å—É–π –∫–∞—Ä–∞–∫—É–ª–∏ ¬´–º–Ω–µ –ª–µ–Ω—å, –Ω–æ —Ö–æ—á–µ—Ç—Å—è¬ª ‚Äî –ø–æ–≤–æ–¥ –ø–æ—Å–º–µ—è—Ç—å—Å—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —à–µ–¥–µ–≤—Ä.",
        "üé• –°–Ω–∏–º–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ, –≥–¥–µ —Ç—ã —Ä–µ–∂–∏—Å—Å—ë—Ä, –Ω–æ –≤—Å—ë –∏–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî —Å–º–µ–π—Å—è –∏ –º–æ–Ω—Ç–∏—Ä—É–π –±–µ–∑ –ø—Ä–∞–≤–∏–ª.",
        "üëü –ü—Ä–∏–¥—É–º–∞–π –±–ª–æ–∫–±–∞—Å—Ç–µ—Ä —Å –≥–ª–∞–≤–Ω—ã–º –≥–µ—Ä–æ–µ–º ‚Äî —Å–≤–æ–µ–π –æ–±—É–≤—å—é. –ó–≤–µ–∑–¥–∞ deserves —Å–ª–∞–≤—É!",
        "üì∏ –°–¥–µ–ª–∞–π –º–∏–Ω–∏-—Ñ–æ—Ç–æ–∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±—É–¥–∏–ª—å–Ω–∏–∫–∞, –∫—Ä—É–∂–∫–∏ –∏ —Ç–∞–ø–∫–∞ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏."
    ],
    "üí™ –î–ª—è —Ç–µ–ª–∞ (–Ω–æ –±–µ–∑ —Ñ–∞–Ω–∞—Ç–∏–∑–º–∞)": [
        "‚è≥ 7 –º–∏–Ω—É—Ç –ª—ë–≥–∫–æ–π –±–æ–ª–∏ ‚Äî –∏ —Ç—ã –ø–æ—á—Ç–∏ —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π (–ø–ª–∞—â –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è).",
        "üö∂‚Äç‚ôÇÔ∏è –í—ã—Ö–æ–¥–∏ –Ω–∞ —É–ª–∏—Ü—É —Å –ø–æ–¥–∫–∞—Å—Ç–æ–º –ø—Ä–æ –±–∞–Ω–¥–∏—Ç–æ–≤ 90-—Ö –∏–ª–∏ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫—É—é –∂–∏–∑–Ω—å –∏ –ø—Ä–æ—Å—Ç–æ –∫–∞–π—Ñ—É–π.",
        "üíÉ –¢–∞–Ω—Ü—É–π, –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —Å–º–æ—Ç—Ä—è—Ç, –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–∞–Ω—Ü—É–π.",
        "üå¨ –°–¥–µ–ª–∞–π 10 –º–∏–Ω—É—Ç –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∏ ‚Äî –Ω–µ –∑–∞—Å—ã–ø–∞–π!",
        "üî• –£—Å—Ç—Ä–æ–π —Ç–∞–Ω—Ü–ø–æ–ª —É —Å–µ–±—è –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–¥ –ª—é–±–∏–º—ã–π —Ç—Ä–µ–∫ ‚Äî –∑–≤–µ–∑–¥–∞ –∫–ª—É–±–∞ –≤ –¥–µ–ª–µ.",
        "üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–±–µ–≥–∏ –ª—ë–≥–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî —É—Å—Ç–∞–ª? –ì–æ–≤–æ—Ä–∏, —á—Ç–æ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞.",
        "üèÜ –ü—Ä–∏–¥—É–º–∞–π –º–∏–Ω–∏-—Ä–∏—Ç—É–∞–ª ‚Äî 10 –ø—Ä—ã–∂–∫–æ–≤, 5 –æ—Ç–∂–∏–º–∞–Ω–∏–π –∏ —Ç–∞–Ω–µ—Ü –ø–æ–±–µ–¥—ã, –¥–µ–ª–∞–π –∫–æ–≥–¥–∞ —Ö–æ—á–µ—à—å.",
        "üê¢ –°—Ç–∞–Ω—å –º–∞—Å—Ç–µ—Ä–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è ‚Äî —Ä–∞—Å—Ç—è–∂–∫–∞ –∏–ª–∏ –ø–æ—Ö–æ–¥–∫–∞ –≤ —Å—Ç–∏–ª–µ ¬´–º–µ–¥–ª–µ–Ω–Ω–æ –∏ —Å—Ç–∏–ª—å–Ω–æ¬ª.",
        "üßò‚Äç‚ôÇÔ∏è –ü–æ–ø—Ä–æ–±—É–π –π–æ–≥—É –¥–ª—è –ª–µ–Ω–∏–≤—ã—Ö ‚Äî –ø–æ–∑—ã –∫–∞–∫ –¥–ª—è —Å–Ω–∞, –Ω–æ —Å –ø–æ–ª—å–∑–æ–π."
    ],
    "üéÆ –ò–≥—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –∫–∞–π—Ñ–∞–Ω—É—Ç—å": [
        "üêê –ò–≥—Ä–∞–π –≤ —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –∫–æ–∑–ª–∞, –≥—É—Å—è —Å –º–∏—Å—Å–∏–µ–π –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–≤–æ–æ–±—Ä–∞–∑–∏–º–æ–µ.",
        "üÉè –ö–∞—Ä—Ç–æ—á–Ω—ã–µ –∏–≥—Ä—ã —Å–æ–ª–æ ‚Äî —É—á–∏—Å—å –±–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å.",
        "üë∂ –í—Å–ø–æ–º–Ω–∏ —Å–µ–±—è —Ä–µ–±—ë–Ω–∫–æ–º –±–µ–∑ –ø—Ä–∞–≤–∏–ª –∏ –ø—Ä–æ—Å—Ç–æ –∫–∞–π—Ñ—É–π –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞.",
        "üß∏ –ò–≥—Ä–∞–π –≤ ¬´—á—Ç–æ –µ—Å–ª–∏¬ª ‚Äî –≤—Ä–∞–≥–∏ –ø–ª—é—à–µ–≤—ã–µ –º–∏—à–∫–∏, –ø—Ä–æ—Å—Ç–æ —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–π –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è.",
        "üß© –ó–∞–ø—É—Å—Ç–∏ –ø–∞–∑–ª –∏ —Å–æ–±–∏—Ä–∞–π –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∞–±—Å—É—Ä–¥.",
        "üé§ –°–ª–æ–≤–µ—Å–Ω—ã–µ –∏–≥—Ä—ã ‚Äî —Ä–∏—Ñ–º—É–π —Å–ª–æ–≤–∞ —Å ¬´–ø–µ–ª—å–º–µ–Ω–∏¬ª –∏ ¬´–≥–æ—Ä–æ—à–µ–∫¬ª, —Å–º–µ–π—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π.",
        "üéÆ –ó–∞–ø—É—Å—Ç–∏ —Å—Ç–∞—Ä—É—é –∏–≥—Ä—É –∏ –≤—Å–ø–æ–º–Ω–∏ –∫–∞–π—Ñ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Å–º—ã—Å–ª–∞.",
        "üåç –ü–æ—Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–π –ø—Ä–æ —Å–≤–æ–π –º–∏—Ä –∏ –∏–≥—Ä—É —Ç–∞–º ‚Äî —Ä–∏—Å—É–π –≤ –≥–æ–ª–æ–≤–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π –∏–¥–µ–∏."
    ]
}


arsenals_–∑–∞—Ä—è–¥–æ–∫ = {
    "–∑–∞—Ä—è–¥–∫–∞_–≤–∞—Ä–∏–∞–Ω—Ç_1": [
        "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç ‚Äî –≤–∫–ª—é—á–∞–π—Å—è –≤ –¥—Ä–∞–π–≤! ‚ö°Ô∏èüî•\n"
        "1. –†–∞–∑–æ–≥—Ä–µ–≤ (2 –º–∏–Ω)\n"
        "üëã –ú–∞—Ö–∏ —Ä—É–∫–∞–º–∏ –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–∑–∞–¥ ‚Äî 30 —Å–µ–∫\n"
        "üîÑ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è –ø–ª–µ—á–∞–º–∏ ‚Äî 30 —Å–µ–∫ (–≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–∑–∞–¥)\n"
        "ü§∏‚Äç‚ôÇÔ∏è –ù–∞–∫–ª–æ–Ω—ã –≥–æ–ª–æ–≤—ã –∏ –ª—ë–≥–∫–∏–µ –ø–æ–≤–æ—Ä–æ—Ç—ã ‚Äî 30 —Å–µ–∫\n"
        "üèÉ‚Äç‚ôÇÔ∏è –õ—ë–≥–∫–∏–π –±–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ —Å –ø–æ–¥–Ω—è—Ç–∏–µ–º –∫–æ–ª–µ–Ω ‚Äî 30 —Å–µ–∫\n\n"
        "2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å (4 –º–∏–Ω)\n"
        "‚ú® –ü—Ä—ã–∂–∫–∏ ¬´–∑–≤—ë–∑–¥–æ—á–∫–∞¬ª ‚Äî 40 —Ä–∞–∑ (—Ä–∞–∑–º–∏–Ω–∞–π —Å—É—Å—Ç–∞–≤—ã)\n"
        "ü¶µ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å —Ä—É–∫–∞–º–∏ –≤–≤–µ—Ä—Ö ‚Äî 20 —Ä–∞–∑ (–Ω–µ –Ω–∞–¥–æ –≥–ª—É–±–æ–∫–æ, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ)\n"
        "üö∂‚Äç‚ôÇÔ∏è –í—ã–ø–∞–¥—ã –≤–ø–µ—Ä—ë–¥ ‚Äî –ø–æ 10 –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É (—á—É—Ç—å —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –±—ë–¥—Ä–∞)\n"
        "üí™ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å—Ç–µ–Ω—ã –∏–ª–∏ –ø–æ–ª–∞ ‚Äî 15 —Ä–∞–∑ (—á—É—Ç—å –Ω–∞–ø—Ä—è–≥–∏ —Ä—É–∫–∏ –∏ –≥—Ä—É–¥—å)\n\n"
        "3. –°–∏–ª–∞ –∏ –±–∞–ª–∞–Ω—Å (2,5 –º–∏–Ω)\n"
        "üßò‚Äç‚ôÇÔ∏è –ü–ª–∞–Ω–∫–∞ –Ω–∞ –ª–æ–∫—Ç—è—Ö ‚Äî –¥–µ—Ä–∂–∏ 45 —Å–µ–∫—É–Ω–¥, –¥—ã—à–∏ —Ä–æ–≤–Ω–æ\n"
        "üçë –ü–æ–¥—ä—ë–º—ã —Ç–∞–∑–∞ –ª—ë–∂–∞ ‚Äî 20 —Ä–∞–∑ (–≤–∫–ª—é—á–∞–π —è–≥–æ–¥–∏—Ü—ã, –Ω–µ —Å–ø–∏–Ω—É)\n"
        "ü¶∂ –ë–∞–ª–∞–Ω—Å –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ ‚Äî –ø–æ 30 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É, —Ä—É–∫–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã (–≤–∫–ª—é—á–∞–µ–º –º–æ–∑–≥ –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é)\n\n"
        "4. –†–∞—Å—Ç—è–∂–∫–∞ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ (1,5 –º–∏–Ω)\n"
        "üôÜ‚Äç‚ôÇÔ∏è –ù–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä—ë–¥, –ø—ã—Ç–∞—è—Å—å –¥–æ—Ç—è–Ω—É—Ç—å—Å—è –¥–æ –ø–∞–ª—å—Ü–µ–≤ –Ω–æ–≥ ‚Äî 30 —Å–µ–∫ (–±–µ–∑ —Ñ–∞–Ω–∞—Ç–∏–∑–º–∞!)\n"
        "üò∫ –ü–æ—Ç—è–≥–∏–≤–∞–Ω–∏—è —Å—Ç–æ—è ‚Äî —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö, —Ç—è–Ω–∏—Å—å –∫–∞–∫ –∫–æ—à–∫–∞ –ø–æ—Å–ª–µ —Å–Ω–∞ ‚Äî 30 —Å–µ–∫\n"
        "üå¨Ô∏è –ì–ª—É–±–æ–∫–∏–µ –≤–¥–æ—Ö–∏ —Å –ø–æ–¥–Ω—è—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏ –∏ –≤—ã–¥–æ—Ö–∏ —Å –æ–ø—É—Å–∫–∞–Ω–∏–µ–º ‚Äî 30 —Å–µ–∫"
    ],
    "–∑–∞—Ä—è–¥–∫–∞_–≤–∞—Ä–∏–∞–Ω—Ç_2": [
"""–ó–∞—Ä—è–¥–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî –≤–∑–±–æ–¥—Ä–∏—Å—å –∏ –∑–∞–∂–≥–∏! ‚ö°Ô∏èüî•
1. –†–∞–∑–æ–≥—Ä–µ–≤ (2 –º–∏–Ω)
ü§∏‚Äç‚ôÄÔ∏è –ö—Ä—É–≥–æ–≤—ã–µ –º–∞—Ö–∏ –Ω–æ–≥–∞–º–∏ –≤–ø–µ—Ä—ë–¥-–Ω–∞–∑–∞–¥ ‚Äî –ø–æ 30 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É
üëê –†–∞–∑–≤–æ–¥–∏–º —Ä—É–∫–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º –≤–º–µ—Å—Ç–µ ‚Äî 1 –º–∏–Ω, –ø–ª–∞–≤–Ω–æ, —á—Ç–æ–±—ã —Ä–∞–∑–æ–≥—Ä–µ—Ç—å –ø–ª–µ—á–∏ –∏ –≥—Ä—É–¥—å

2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å (4 –º–∏–Ω)
üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ —Å –∑–∞—Ö–ª—ë—Å—Ç–æ–º –ø—è—Ç–æ–∫ –∫ —è–≥–æ–¥–∏—Ü–∞–º ‚Äî 40 —Å–µ–∫—É–Ω–¥
ü¶µ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∫–æ—Ä–ø—É—Å–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É ‚Äî 15 —Ä–∞–∑ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É (–≤–∫–ª—é—á–∞–µ–º –∫–æ—Å—ã–µ –º—ã—à—Ü—ã)
üêæ –®–∞–≥–∏ "–∫—Ä–∞–±–æ–º" –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ ‚Äî 1 –º–∏–Ω—É—Ç–∞ (–¥–ª—è –±–æ–∫–æ–≤–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏)
üí™ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å –∫–æ–ª–µ–Ω ‚Äî 20 —Ä–∞–∑ (—á—É—Ç—å –ø–æ–ª–µ–≥—á–µ, –Ω–æ —Å —á—É–≤—Å—Ç–≤–æ–º)

3. –°–∏–ª–∞ –∏ –±–∞–ª–∞–Ω—Å (2,5 –º–∏–Ω)
üßò‚Äç‚ôÄÔ∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–ø–∞–¥ ‚Äî –¥–µ—Ä–∂–∏–º –ø–æ 30 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö (—Ç—É—Ç –∏ –±–∞–ª–∞–Ω—Å, –∏ —Ä–∞—Å—Ç—è–∂–∫–∞)
üçë –ú–æ—Å—Ç–∏–∫ –Ω–∞ —è–≥–æ–¥–∏—Ü—ã —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π ‚Äî –ø–æ 15 —Ä–∞–∑ –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ–≥—É
ü¶∂ –ë–∞–ª–∞–Ω—Å –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏ ‚Äî –ø–æ 20 —Å–µ–∫ (–µ—Å–ª–∏ –Ω–µ —É–ø–∞–ª ‚Äî –≥–µ—Ä–æ–π!)

4. –†–∞—Å—Ç—è–∂–∫–∞ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ (1,5 –º–∏–Ω)
üôá‚Äç‚ôÇÔ∏è –ù–∞–∫–ª–æ–Ω—ã –≥–æ–ª–æ–≤—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî –ø–æ 20 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
üëê –ü–æ—Ç—è–≥–∏–≤–∞–Ω–∏—è –≤–ø–µ—Ä—ë–¥, –ø—ã—Ç–∞—è—Å—å –¥–æ—Ç—è–Ω—É—Ç—å—Å—è –¥–æ –ø–æ–ª–∞ ‚Äî 30 —Å–µ–∫ (–±–µ–∑ —Ñ–∞–Ω–∞—Ç–∏–∑–º–∞)
üå¨Ô∏è –ì–ª—É–±–æ–∫–∏–µ –≤–¥–æ—Ö–∏ —á–µ—Ä–µ–∑ –Ω–æ—Å, –≤—ã–¥–æ—Ö —á–µ—Ä–µ–∑ —Ä–æ—Ç ‚Äî 30 —Å–µ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π, –∫–∞–∫ –≤—Å—è —É—Å—Ç–∞–ª–æ—Å—Ç—å —É—Ö–æ–¥–∏—Ç –ø—Ä–æ—á—å"""

    ],
}

async def start_training_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
    [
        InlineKeyboardButton("üí• –î–µ–Ω—å 1", callback_data='—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞1'),
        InlineKeyboardButton("üçë –î–µ–Ω—å 2", callback_data='—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞2')
    ],
    [
        InlineKeyboardButton("ü¶æ –î–µ–Ω—å 3", callback_data='—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞3'),
        InlineKeyboardButton("‚ö° –î–µ–Ω—å 4", callback_data='—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞4')
    ]
]

    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        "üî• *–ì–æ—Ç–æ–≤ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Ç–µ–ª–æ –∏ –¥—É—Ö?*\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –≤–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª–∏!\n\n"
        "_–ü–æ–º–Ω–∏: –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –ø—É—Ç—å –∫ –±–æ–ª—å—à–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É_ üí™"
    )

    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")


async def handle_training_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data  # –æ–∂–∏–¥–∞–µ—Ç—Å—è '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞1', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞2' –∏ —Ç.–¥.
    
    if data.startswith("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"):
        day = int(data.replace("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", ""))
        context.user_data[f"warmup_index_day{day}"] = 0
        context.user_data[f"main_index_day{day}"] = 0
        context.user_data["warmup_message_ids"] = []
        context.user_data["main_message_ids"] = []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–º–∏–Ω–∫–∏ –¥–ª—è –¥–Ω—è
        warmup_texts = {
            1: (
                "üü° *–†–ê–ó–ú–ò–ù–ö–ê (5 –º–∏–Ω—É—Ç)*\n–ù–∞—á–Ω—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!\n\n"
                "1Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –≤–ø–µ—Ä—ë–¥ ‚Äî 15 —Å–µ–∫—É–Ω–¥\n"
                "2Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –Ω–∞–∑–∞–¥ ‚Äî 15 —Å–µ–∫—É–Ω–¥\n"
                "3Ô∏è‚É£ –ü–ª–µ—á–µ–≤—ã–µ –∫—Ä—É–≥–∏ –∏ –º–∞—Ö–∏ —Ä—É–∫–∞–º–∏ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n"
                "4Ô∏è‚É£ –ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n"
                "5Ô∏è‚É£ –õ—ë–≥–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ ‚Äî 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "6Ô∏è‚É£ –ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å (—Ä–∞–∑–æ–≥—Ä–µ–≤) ‚Äî 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "7Ô∏è‚É£ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å ‚Äî 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "8Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n"
            ),
            2: (
                "üü° *–†–ê–ó–ú–ò–ù–ö–ê (5 –º–∏–Ω—É—Ç)*\n–ù–∞—á–Ω—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!\n\n"
                "1Ô∏è‚É£ –ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
                "2Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
                "3Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞ ‚Äî 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "4Ô∏è‚É£ –ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "5Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n"
            ),
            3: (
                "üü° *–†–ê–ó–ú–ò–ù–ö–ê (5 –º–∏–Ω—É—Ç)*\n–ù–∞—á–Ω—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!\n\n"
                "1Ô∏è‚É£ –ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
                "2Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
                "3Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞ ‚Äî 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "4Ô∏è‚É£ –ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "5Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n"
            ),
            4: (
                "üü° *–†–ê–ó–ú–ò–ù–ö–ê (5 –º–∏–Ω—É—Ç)*\n–ù–∞—á–Ω—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!\n\n"
                "1Ô∏è‚É£ –ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
                "2Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
                "3Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞ ‚Äî 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "4Ô∏è‚É£ –ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
                "5Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n"
            )
        }
        
        text = warmup_texts.get(day, "–†–∞–∑–º–∏–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –∑–∞–¥–∞–Ω–∞.")
        await query.message.reply_text(text, parse_mode="Markdown")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Ä–∞–∑–º–∏–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await send_next_warmup_step(day, query.message.chat_id, context)




async def handle_warmup_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # callback_data: —Ä–∞–∑–º–∏–Ω–∫–∞{day}_—à–∞–≥_{index}_{action}
    data = query.data
    parts = data.split("_")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –∏–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
    day_part = parts[0]  # '—Ä–∞–∑–º–∏–Ω–∫–∞1', '—Ä–∞–∑–º–∏–Ω–∫–∞2' –∏ —Ç.–¥.
    day = int(day_part.replace("—Ä–∞–∑–º–∏–Ω–∫–∞", ""))

    step_index = int(parts[2])
    action = parts[3]
    chat_id = query.message.chat_id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–∏–Ω–∫–∏ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è
    warmup_lists = {
        1: warmup_steps_day1,
        2: warmup_steps_day2,
        3: warmup_steps_day3,
        4: warmup_steps_day4,
    }

    warmup_steps_for_day = warmup_lists.get(day)
    if not warmup_steps_for_day:
        await query.message.reply_text("‚ö†Ô∏è –†–∞–∑–º–∏–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    step = warmup_steps_for_day[step_index]

    if action == "—Å—Ç–∞—Ä—Ç":
        msg_timer_start = await query.message.reply_text(f"‚è± {step['name']} ‚Äî —Ç–∞–π–º–µ—Ä {step.get('duration', 0)} —Å–µ–∫ –Ω–∞—á–∞—Ç!")
        await asyncio.sleep(step.get('duration', 0))
        msg_timer_end = await query.message.reply_text(f"‚úÖ {step['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        context.user_data["warmup_message_ids"] = [
            query.message.message_id,
            msg_timer_start.message_id,
            msg_timer_end.message_id
        ]
        context.user_data["was_started"] = True

    elif action == "–≥–æ—Ç–æ–≤–æ":
        msg_done = await query.message.reply_text(f"‚úÖ {step['name']} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        await asyncio.sleep(2)

        message_ids = context.user_data.get("warmup_message_ids", [])
        message_ids.append(msg_done.message_id)
        message_ids.append(query.message.message_id)

        try:
            if context.user_data.get("was_started"):
                for msg_id in message_ids[-4:]:
                    await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            else:
                for msg_id in message_ids[-2:]:
                    await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        context.user_data["was_started"] = False
        context.user_data["warmup_message_ids"] = []

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–º–∏–Ω–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        key = f"warmup_index_day{day}"
        index = context.user_data.get(key, 0) + 1
        context.user_data[key] = index

        if index >= len(warmup_steps_for_day):
            # –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            await start_main_workout(day, chat_id, context)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Ä–∞–∑–º–∏–Ω–∫–∏
            await send_next_warmup_step(day, chat_id, context)

async def send_next_warmup_step(day: int, chat_id, context):
    warmup_lists = {
        1: warmup_steps_day1,
        2: warmup_steps_day2,
        3: warmup_steps_day3,
        4: warmup_steps_day4,
    }

    warmup_steps_for_day = warmup_lists.get(day)
    if not warmup_steps_for_day:
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –†–∞–∑–º–∏–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    index = context.user_data.get(f"warmup_index_day{day}", 0)

    if index >= len(warmup_steps_for_day):
        # –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        await start_main_workout(day, chat_id, context)
        return

    step = warmup_steps_for_day[index]
    text = f"*{step['name']}*\n"
    text += f"‚è± {step['duration']} —Å–µ–∫" if step["type"] == "time" else f"üîÅ {step['reps']} —Ä–∞–∑"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞{day}_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞{day}_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["warmup_message_ids"] = [message.message_id]

async def start_main_workout(day, chat_id, context):
    main_workout = {
        1: (
            "üéâ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ...\n\n"
            "üí• *–î–ï–ù–¨ 1 ‚Äî –ì—Ä—É–¥—å, —Ä—É–∫–∏, –ø—Ä–µ—Å—Å*\n\n"
            "‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ ‚Äî 3√ó–º–∞–∫—Å–∏–º—É–º\n"
            "‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å —É–∑–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π ‚Äî 3√ó10\n"
            "‚Ä¢ –ì–∞–Ω—Ç–µ–ª–∏ –≤–≤–µ—Ä—Ö –ª—ë–∂–∞ –Ω–∞ –ø–æ–ª—É ‚Äî 3√ó12\n"
            "‚Ä¢ –ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å ‚Äî 3√ó15\n"
            "‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å ‚Äî 3√ó20\n"
            "‚Ä¢ –ü–ª–∞–Ω–∫–∞ ‚Äî 3√ó30 —Å–µ–∫"
        ),
        2: (
            "üéâ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ...\n\n"
            "üçë *–î–ï–ù–¨ 2 ‚Äî –Ø–≥–æ–¥–∏—Ü—ã, –Ω–æ–≥–∏, –ø—Ä–µ—Å—Å*\n\n"
            "‚Ä¢ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ ‚Äî 3√ó15\n"
            "‚Ä¢ –í—ã–ø–∞–¥—ã –≤–ø–µ—Ä—ë–¥ (–∫–∞–∂–¥–∞—è –Ω–æ–≥–∞) ‚Äî 3√ó12\n"
            "‚Ä¢ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ —Å –≤–µ—Å–æ–º ‚Äî 3√ó15\n"
            "‚Ä¢ –ü–æ–¥—ä—ë–º –Ω–æ–≥ –ª—ë–∂–∞ (–ø—Ä–µ—Å—Å) ‚Äî 3√ó20\n"
            "‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è ‚Äî 3√ó20\n"
            "‚Ä¢ –ü–ª–∞–Ω–∫–∞ –±–æ–∫–æ–≤–∞—è (–ª–µ–≤–∞—è + –ø—Ä–∞–≤–∞—è) ‚Äî –ø–æ 30 —Å–µ–∫"
        ),
        3: (
            "üéâ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ...\n\n"
            "ü¶æ *–î–ï–ù–¨ 3 ‚Äî –°–ø–∏–Ω–∞, –ø–ª–µ—á–∏, –ø—Ä–µ—Å—Å*\n\n"
            "‚Ä¢ –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è ‚Äî 3√ó–º–∞–∫—Å–∏–º—É–º\n"
            "‚Ä¢ –¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –≤ –Ω–∞–∫–ª–æ–Ω–µ ‚Äî 3√ó12\n"
            "‚Ä¢ –†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî 3√ó12\n"
            "‚Ä¢ \"–°—É–ø–µ—Ä–º–µ–Ω\" –ª—ë–∂–∞ ‚Äî 3√ó20\n"
            "‚Ä¢ –ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥—ä—ë–º–æ–º –Ω–æ–≥–∏ ‚Äî 3√ó30 —Å–µ–∫\n"
            "‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å —Ä—É–∫–∞–º–∏ –≤–≤–µ—Ä—Ö ‚Äî 3√ó20"
        ),
        4: (
            "üéâ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ...\n\n"
            "‚ö° *–î–ï–ù–¨ 4 ‚Äî –ö–∞—Ä–¥–∏–æ –∏ –¥–æ–±–∏–≤–∫–∞*\n\n"
            "‚Ä¢ –ë—ë—Ä–ø–∏ ‚Äî 3√ó10\n"
            "‚Ä¢ –ü—Ä—ã–∂–∫–∏ —Å —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–æ–≥ ‚Äî 3√ó20\n"
            "‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º—É–º ‚Äî 3√ó–º–∞–∫—Å\n"
            "‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å ‚Äî 3√ó20\n"
            "‚Ä¢ –ü–ª–∞–Ω–∫–∞ ‚Äî 3√ó1 –º–∏–Ω"
        )
    }

    text = main_workout.get(day, "–û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await context.bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")
    context.user_data[f"main_index_day{day}"] = 0
    await send_next_main_step(day, chat_id, context)





async def handle_main_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # callback_data: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞{day}_—à–∞–≥_{index}_{action}
    data = query.data
    parts = data.split("_")

    day_part = parts[0]  # '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞1', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞2' –∏ —Ç.–¥.
    day = int(day_part.replace("—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", ""))

    step_index = int(parts[2])
    action = parts[3]
    chat_id = query.message.chat_id

    main_workouts = {
        1: main_workout_day1,
        2: main_workout_day2,
        3: main_workout_day3,
        4: main_workout_day4,
    }

    workout_for_day = main_workouts.get(day)
    if not workout_for_day:
        await query.message.reply_text("‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    step = workout_for_day[step_index]

    if action == "—Å—Ç–∞—Ä—Ç":
        if step.get("type") == "time":
            msg_start = await query.message.reply_text(f"‚è± {step['name']} ‚Äî —Ç–∞–π–º–µ—Ä {step['duration']} —Å–µ–∫ –Ω–∞—á–∞—Ç!")
            await asyncio.sleep(step['duration'])
            msg_end = await query.message.reply_text(f"‚úÖ {step['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            context.user_data["main_message_ids"] = [
                query.message.message_id,
                msg_start.message_id,
                msg_end.message_id,
            ]
        else:
            context.user_data["main_message_ids"] = [query.message.message_id]
        context.user_data["main_started"] = True

    elif action == "–≥–æ—Ç–æ–≤–æ":
        msg_done = await query.message.reply_text(f"‚úÖ {step['name']} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        await asyncio.sleep(2)

        message_ids = context.user_data.get("main_message_ids", [])
        message_ids.append(msg_done.message_id)
        message_ids.append(query.message.message_id)

        try:
            if context.user_data.get("main_started"):
                for msg_id in message_ids[-4:]:
                    await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            else:
                for msg_id in message_ids[-2:]:
                    await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        context.user_data["main_started"] = False
        context.user_data["main_message_ids"] = []

        key = f"main_index_day{day}"
        index = context.user_data.get(key, 0) + 1
        context.user_data[key] = index

        if index >= len(workout_for_day):
            await context.bot.send_message(chat_id=chat_id, text=f"üéâ –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–Ω—è {day} –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™")
            return

        await send_next_main_step(day, chat_id, context)


async def send_next_main_step(day: int, chat_id, context):
    main_workouts = {
        1: main_workout_day1,
        2: main_workout_day2,
        3: main_workout_day3,
        4: main_workout_day4,
    }

    workout_for_day = main_workouts.get(day)
    if workout_for_day is None:
        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    index = context.user_data.get(f"main_index_day{day}", 0)
    if index >= len(workout_for_day):
        return

    step = workout_for_day[index]

    text = f"*{step['name']}*\n"
    if step.get("type") == "time":
        text += f"‚è± {step['sets']}√ó{step['duration']} —Å–µ–∫"
    else:
        text += f"üîÅ {step['reps']}"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞{day}_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞{day}_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ"),
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown",
    )

    context.user_data["main_message_ids"] = [message.message_id]










###################################################################################################################3
main_workout_day1 = [
    {"name": "–û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞", "reps": "3√ó–º–∞–∫—Å–∏–º—É–º"},
    {"name": "–û—Ç–∂–∏–º–∞–Ω–∏—è —Å —É–∑–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π", "reps": "3√ó10"},
    {"name": "–ì–∞–Ω—Ç–µ–ª–∏ –≤–≤–µ—Ä—Ö –ª—ë–∂–∞ –Ω–∞ –ø–æ–ª—É", "reps": "3√ó12"},
    {"name": "–ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å", "reps": "3√ó15"},
    {"name": "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å", "reps": "3√ó20"},
    {"name": "–ü–ª–∞–Ω–∫–∞", "duration": 30, "type": "time", "sets": 3}
]

warmup_steps_day1 = [
    {"name": "–ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –≤–ø–µ—Ä—ë–¥", "duration": 15, "type": "time"},
    {"name": "–ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –Ω–∞–∑–∞–¥", "duration": 15, "type": "time"},
    {"name": "–ü–ª–µ—á–µ–≤—ã–µ –∫—Ä—É–≥–∏ –∏ –º–∞—Ö–∏ —Ä—É–∫–∞–º–∏", "duration": 30, "type": "time"},
    {"name": "–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ", "duration": 30, "type": "time"},
    {"name": "–õ—ë–≥–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞", "reps": 10, "type": "reps"},
    {"name": "–ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å (—Ä–∞–∑–æ–≥—Ä–µ–≤)", "reps": 10, "type": "reps"},
    {"name": "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å", "reps": 15, "type": "reps"},
    {"name": "–ü–ª–∞–Ω–∫–∞", "duration": 30, "type": "time"}
]
async def handle_day1_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data["warmup_index"] = 0
    context.user_data["main_index"] = 0
    context.user_data["warmup_message_ids"] = []
    context.user_data["main_message_ids"] = []

    await query.message.reply_text(
        "üü° *–†–ê–ó–ú–ò–ù–ö–ê (5 –º–∏–Ω—É—Ç)*\n–ù–∞—á–Ω—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!\n\n"
        "1Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –≤–ø–µ—Ä—ë–¥ ‚Äî 15 —Å–µ–∫—É–Ω–¥\n"
        "2Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –Ω–∞–∑–∞–¥ ‚Äî 15 —Å–µ–∫—É–Ω–¥\n"
        "3Ô∏è‚É£ –ü–ª–µ—á–µ–≤—ã–µ –∫—Ä—É–≥–∏ –∏ –º–∞—Ö–∏ —Ä—É–∫–∞–º–∏ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n"
        "4Ô∏è‚É£ –ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n"
        "5Ô∏è‚É£ –õ—ë–≥–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ ‚Äî 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "6Ô∏è‚É£ –ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å (—Ä–∞–∑–æ–≥—Ä–µ–≤) ‚Äî 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "7Ô∏è‚É£ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å ‚Äî 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "8Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n",
        parse_mode="Markdown"
    )
    await send_next_warmup_step_day1(query.message.chat_id, context)


async def send_next_warmup_step_day1(chat_id, context):
    index = context.user_data.get("warmup_index", 0)

    if index >= len(warmup_steps_day1):
        await context.bot.send_message(chat_id=chat_id,
            text=(
                "üéâ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ...\n\n"
                "üí• *–î–ï–ù–¨ 1 ‚Äî –ì—Ä—É–¥—å, —Ä—É–∫–∏, –ø—Ä–µ—Å—Å*\n\n"
                "‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ ‚Äî 3√ó–º–∞–∫—Å–∏–º—É–º\n"
                "‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è —Å —É–∑–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π ‚Äî 3√ó10\n"
                "‚Ä¢ –ì–∞–Ω—Ç–µ–ª–∏ –≤–≤–µ—Ä—Ö –ª—ë–∂–∞ –Ω–∞ –ø–æ–ª—É ‚Äî 3√ó12\n"
                "‚Ä¢ –ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å ‚Äî 3√ó15\n"
                "‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å ‚Äî 3√ó20\n"
                "‚Ä¢ –ü–ª–∞–Ω–∫–∞ ‚Äî 3√ó30 —Å–µ–∫"
            ),
            parse_mode="Markdown"
        )
        context.user_data["main_index"] = 0
        await send_next_main_step_day1(chat_id, context)
        return

    step = warmup_steps_day1[index]
    text = f"*{step['name']}*\n"
    text += f"‚è± {step['duration']} —Å–µ–∫" if step["type"] == "time" else f"üîÅ {step['reps']} —Ä–∞–∑"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞1_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞1_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["warmup_message_ids"] = [message.message_id]


async def send_next_main_step_day1(chat_id, context):
    index = context.user_data.get("main_index", 0)

    if index >= len(main_workout_day1):
        await context.bot.send_message(chat_id=chat_id, text="üéâ –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–Ω—è 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª! üí™")
        return

    step = main_workout_day1[index]
    text = f"*{step['name']}*\n"

    if step.get("type") == "time":
        text += f"‚è± {step['sets']}√ó{step['duration']} —Å–µ–∫"
    else:
        text += f"üîÅ {step['reps']}"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞1_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞1_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["main_message_ids"] = [message.message_id]




############################################################################################################################
main_workout_day2 = [
    {"name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏", "reps": "3√ó15"},
    {"name": "–í—ã–ø–∞–¥—ã –≤–ø–µ—Ä—ë–¥ (–∫–∞–∂–¥–∞—è –Ω–æ–≥–∞)", "reps": "3√ó12"},
    {"name": "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ —Å –≤–µ—Å–æ–º", "reps": "3√ó15"},
    {"name": "–ü–æ–¥—ä—ë–º –Ω–æ–≥ –ª—ë–∂–∞ (–ø—Ä–µ—Å—Å)", "reps": "3√ó20"},
    {"name": "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", "reps": "3√ó20"},
    {"name": "–ü–ª–∞–Ω–∫–∞ –±–æ–∫–æ–≤–∞—è (–ª–µ–≤–∞—è + –ø—Ä–∞–≤–∞—è)", "duration": 30, "type": "time", "sets": 2}  # –ø–æ 30 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
]

warmup_steps_day2 = [
    {"name": "–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ", "duration": 60, "type": "time"},
    {"name": "–ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏", "duration": 60, "type": "time"},
    {"name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞", "reps": 15, "type": "reps"},
    {"name": "–ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã", "reps": 20, "type": "reps"},
    {"name": "–ü–ª–∞–Ω–∫–∞", "duration": 30, "type": "time"}
]

# –ó–∞–ø—É—Å–∫ —Ä–∞–∑–º–∏–Ω–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–Ω—è 2
async def handle_day2_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data["warmup_index"] = 0
    context.user_data["main_index"] = 0
    context.user_data["warmup_message_ids"] = []
    context.user_data["main_message_ids"] = []

    await query.message.reply_text(
        "üü° *–†–ê–ó–ú–ò–ù–ö–ê (5 –º–∏–Ω—É—Ç)*\n–ù–∞—á–Ω—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!\n\n"
        "1Ô∏è‚É£ –ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
        "2Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
        "3Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞ ‚Äî 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "4Ô∏è‚É£ –ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "5Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n",
        parse_mode="Markdown"
    )
    await send_next_warmup_step_day2(query.message.chat_id, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ —Ä–∞–∑–º–∏–Ω–∫–∏ –î–Ω—è 2
async def send_next_warmup_step_day2(chat_id, context):
    index = context.user_data.get("warmup_index", 0)

    if index >= len(warmup_steps_day2):
        await context.bot.send_message(chat_id=chat_id,
            text=(
                "üéâ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ...\n\n"
                "üçë *–î–ï–ù–¨ 2 ‚Äî –Ø–≥–æ–¥–∏—Ü—ã, –Ω–æ–≥–∏, –ø—Ä–µ—Å—Å*\n\n"
                "‚Ä¢ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ ‚Äî 3√ó15\n"
                "‚Ä¢ –í—ã–ø–∞–¥—ã –≤–ø–µ—Ä—ë–¥ (–∫–∞–∂–¥–∞—è –Ω–æ–≥–∞) ‚Äî 3√ó12\n"
                "‚Ä¢ –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ —Å –≤–µ—Å–æ–º ‚Äî 3√ó15\n"
                "‚Ä¢ –ü–æ–¥—ä—ë–º –Ω–æ–≥ –ª—ë–∂–∞ (–ø—Ä–µ—Å—Å) ‚Äî 3√ó20\n"
                "‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è ‚Äî 3√ó20\n"
                "‚Ä¢ –ü–ª–∞–Ω–∫–∞ –±–æ–∫–æ–≤–∞—è (–ª–µ–≤–∞—è + –ø—Ä–∞–≤–∞—è) ‚Äî –ø–æ 30 —Å–µ–∫"
            ),
            parse_mode="Markdown"
        )
        context.user_data["main_index"] = 0
        await send_next_main_step_day2(chat_id, context)
        return

    step = warmup_steps_day2[index]

    text = f"*{step['name']}*\n"
    text += f"‚è± {step['duration']} —Å–µ–∫" if step["type"] == "time" else f"üîÅ {step['reps']} —Ä–∞–∑"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞2_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞2_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["warmup_message_ids"] = [message.message_id]

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–Ω—è 2
async def send_next_main_step_day2(chat_id, context):
    index = context.user_data.get("main_index", 0)

    if index >= len(main_workout_day2):
        await context.bot.send_message(chat_id=chat_id, text="üéâ –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–Ω—è 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™")
        return

    step = main_workout_day2[index]
    text = f"*{step['name']}*\n"

    if step.get("type") == "time":
        text += f"‚è± {step['sets']}√ó{step['duration']} —Å–µ–∫"
    else:
        text += f"üîÅ {step['reps']}"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞2_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞2_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["main_message_ids"] = [message.message_id]
############################################################################################################################

main_workout_day3 = [
    {"name": "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "reps": "3√ó–º–∞–∫—Å–∏–º—É–º"},
    {"name": "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –≤ –Ω–∞–∫–ª–æ–Ω–µ", "reps": "3√ó12"},
    {"name": "–†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –≤ —Å—Ç–æ—Ä–æ–Ω—ã", "reps": "3√ó12"},
    {"name": "\"–°—É–ø–µ—Ä–º–µ–Ω\" –ª—ë–∂–∞", "reps": "3√ó20"},
    {"name": "–ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥—ä—ë–º–æ–º –Ω–æ–≥–∏", "duration": 30, "type": "time", "sets": 3},
    {"name": "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å —Ä—É–∫–∞–º–∏ –≤–≤–µ—Ä—Ö", "reps": "3√ó20"}
]

warmup_steps_day3 = [
    {"name": "–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ", "duration": 60, "type": "time"},
    {"name": "–ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏", "duration": 60, "type": "time"},
    {"name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞", "reps": 15, "type": "reps"},
    {"name": "–ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã", "reps": 20, "type": "reps"},
    {"name": "–ü–ª–∞–Ω–∫–∞", "duration": 30, "type": "time"}
]

async def handle_day3_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data["warmup_index"] = 0
    context.user_data["main_index"] = 0
    context.user_data["warmup_message_ids"] = []
    context.user_data["main_message_ids"] = []

    await query.message.reply_text(
        "üü° *–†–ê–ó–ú–ò–ù–ö–ê (5 –º–∏–Ω—É—Ç)*\n–ù–∞—á–Ω—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!\n\n"
        "1Ô∏è‚É£ –ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
        "2Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
        "3Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞ ‚Äî 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "4Ô∏è‚É£ –ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "5Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n",
        parse_mode="Markdown"
    )
    await send_next_warmup_step_day3(query.message.chat_id, context)

async def send_next_warmup_step_day3(chat_id, context):
    index = context.user_data.get("warmup_index", 0)

    if index >= len(warmup_steps_day3):
        await context.bot.send_message(chat_id=chat_id,
            text=(
                "üéâ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ...\n\n"
                "ü¶æ *–î–ï–ù–¨ 3 ‚Äî –°–ø–∏–Ω–∞, –ø–ª–µ—á–∏, –ø—Ä–µ—Å—Å*\n\n"
                "‚Ä¢ –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è ‚Äî 3√ó–º–∞–∫—Å–∏–º—É–º\n"
                "‚Ä¢ –¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –≤ –Ω–∞–∫–ª–æ–Ω–µ ‚Äî 3√ó12\n"
                "‚Ä¢ –†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî 3√ó12\n"
                "‚Ä¢ \"–°—É–ø–µ—Ä–º–µ–Ω\" –ª—ë–∂–∞ ‚Äî 3√ó20\n"
                "‚Ä¢ –ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥—ä—ë–º–æ–º –Ω–æ–≥–∏ ‚Äî 3√ó30 —Å–µ–∫\n"
                "‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å —Ä—É–∫–∞–º–∏ –≤–≤–µ—Ä—Ö ‚Äî 3√ó20"
            ),
            parse_mode="Markdown"
        )
        context.user_data["main_index"] = 0
        await send_next_main_step_day3(chat_id, context)
        return

    step = warmup_steps_day3[index]
    text = f"*{step['name']}*\n"
    text += f"‚è± {step['duration']} —Å–µ–∫" if step["type"] == "time" else f"üîÅ {step['reps']} —Ä–∞–∑"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞3_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞3_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["warmup_message_ids"] = [message.message_id]

async def send_next_main_step_day3(chat_id, context):
    index = context.user_data.get("main_index", 0)

    if index >= len(main_workout_day3):
        await context.bot.send_message(chat_id=chat_id, text="üéâ –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –î–Ω—è 3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–æ–ª–æ–¥–µ—Ü, –∑–≤–µ—Ä—é–≥–∞! üê∫")
        return

    step = main_workout_day3[index]
    text = f"*{step['name']}*\n"

    if step.get("type") == "time":
        text += f"‚è± {step['sets']}√ó{step['duration']} —Å–µ–∫"
    else:
        text += f"üîÅ {step['reps']}"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞3_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞3_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["main_message_ids"] = [message.message_id]

############################################################################################################################
main_workout_day4 = [
    {"name": "–ë—ë—Ä–ø–∏", "reps": "3√ó10"},
    {"name": "–ü—Ä—ã–∂–∫–∏ —Å —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–æ–≥", "reps": "3√ó20"},
    {"name": "–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º—É–º", "reps": "3√ó–º–∞–∫—Å"},
    {"name": "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å", "reps": "3√ó20"},
    {"name": "–ü–ª–∞–Ω–∫–∞", "duration": 60, "type": "time", "sets": 3}
]

warmup_steps_day4 = [
    {"name": "–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ", "duration": 60, "type": "time"},
    {"name": "–ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏", "duration": 60, "type": "time"},
    {"name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞", "reps": 15, "type": "reps"},
    {"name": "–ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã", "reps": 20, "type": "reps"},
    {"name": "–ü–ª–∞–Ω–∫–∞", "duration": 30, "type": "time"}
]

async def handle_day4_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data["warmup_index"] = 0
    context.user_data["main_index"] = 0
    context.user_data["warmup_message_ids"] = []
    context.user_data["main_message_ids"] = []

    await query.message.reply_text(
        "üü° *–†–ê–ó–ú–ò–ù–ö–ê (5 –º–∏–Ω—É—Ç)*\n–ù–∞—á–Ω—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º!\n\n"
        "1Ô∏è‚É£ –ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
        "2Ô∏è‚É£ –ö—Ä—É–≥–æ–≤—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–∫–∞–º–∏ –∏ –Ω–æ–≥–∞–º–∏ ‚Äî 60 —Å–µ–∫—É–Ω–¥\n"
        "3Ô∏è‚É£ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è –±–µ–∑ –≤–µ—Å–∞ ‚Äî 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "4Ô∏è‚É£ –ù–∞–∫–ª–æ–Ω—ã –≤ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "5Ô∏è‚É£ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n",
        parse_mode="Markdown"
    )
    await send_next_warmup_step_day4(query.message.chat_id, context)

async def send_next_warmup_step_day4(chat_id, context):
    index = context.user_data.get("warmup_index", 0)

    if index >= len(warmup_steps_day4):
        await context.bot.send_message(chat_id=chat_id,
            text=(
                "üéâ –†–∞–∑–º–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ...\n\n"
                "‚ö° *–î–ï–ù–¨ 4 ‚Äî –ö–∞—Ä–¥–∏–æ –∏ –¥–æ–±–∏–≤–∫–∞*\n\n"
                "‚Ä¢ –ë—ë—Ä–ø–∏ ‚Äî 3√ó10\n"
                "‚Ä¢ –ü—Ä—ã–∂–∫–∏ —Å —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ–º –Ω–æ–≥ ‚Äî 3√ó20\n"
                "‚Ä¢ –û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º—É–º ‚Äî 3√ó–º–∞–∫—Å\n"
                "‚Ä¢ –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å ‚Äî 3√ó20\n"
                "‚Ä¢ –ü–ª–∞–Ω–∫–∞ ‚Äî 3√ó1 –º–∏–Ω"
            ),
            parse_mode="Markdown"
        )
        context.user_data["main_index"] = 0
        await send_next_main_step_day4(chat_id, context)
        return

    step = warmup_steps_day4[index]
    text = f"*{step['name']}*\n"
    text += f"‚è± {step['duration']} —Å–µ–∫" if step["type"] == "time" else f"üîÅ {step['reps']} —Ä–∞–∑"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞4_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ä–∞–∑–º–∏–Ω–∫–∞4_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["warmup_message_ids"] = [message.message_id]



async def send_next_main_step_day4(chat_id, context):
    index = context.user_data.get("main_index", 0)

    if index >= len(main_workout_day4):
        await context.bot.send_message(chat_id=chat_id, text="üéâ –î–µ–Ω—å 4 –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã –º–æ–Ω—Å—Ç—Ä! üß® –û—Ç–¥—ã—Ö –∑–∞—Å–ª—É–∂–µ–Ω.")
        return

    step = main_workout_day4[index]
    text = f"*{step['name']}*\n"

    if step.get("type") == "time":
        text += f"‚è± {step['sets']}√ó{step['duration']} —Å–µ–∫"
    else:
        text += f"üîÅ {step['reps']}"

    buttons = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –Ø –Ω–∞—á–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞4_—à–∞–≥_{index}_—Å—Ç–∞—Ä—Ç"),
            InlineKeyboardButton("‚úÖ –Ø —Å–¥–µ–ª–∞–ª", callback_data=f"—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞4_—à–∞–≥_{index}_–≥–æ—Ç–æ–≤–æ")
        ]
    ]

    message = await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

    context.user_data["main_message_ids"] = [message.message_id]





############################################################################################################################


async def random_skuki(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Å–µ–Ω–∞–ª
    arsenal_name = random.choice(list(arsenals.keys()))
    task = random.choice(arsenals[arsenal_name])
    await update.message.reply_text(f"–í–æ—Ç —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è –∏–∑ –∞—Ä—Å–µ–Ω–∞–ª–∞ - \n**{arsenal_name}**:")
    await update.message.reply_text(f"{task}")

async def random_zaryadki(update: Update, context: ContextTypes.DEFAULT_TYPE):
    arsenal_name = random.choice(list(arsenals_–∑–∞—Ä—è–¥–æ–∫.keys()))
    task = random.choice(arsenals_–∑–∞—Ä—è–¥–æ–∫[arsenal_name])
    await update.message.reply_text(f"–í–æ—Ç —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞ –î–ï–ô–°–¢–í–£–ô - \n**{arsenal_name}**:")
    await update.message.reply_text(task)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–æ—Ç üí™")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/go - –ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ò–ò\n"
        "/exit - –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
    )
    await update.message.reply_text(help_text)

async def set_commands(application):
    commands = [
    BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    BotCommand("training", "–í—ã–±—Ä–∞—Ç—å/–Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
    BotCommand("help", "–ü–æ–º–æ—â—å"),
    BotCommand("go", "–ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä"),
    BotCommand("exit", "–í—ã–π—Ç–∏ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"),
    BotCommand("random_skuki", "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é –¥–ª—è –∑–∞–Ω—è—Ç–∏—è"),
    BotCommand("random_zaryadki", "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∑–∞—Ä—è–¥–∫—É")
]
    await application.bot.set_my_commands(commands)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text

    if user_id in chat_users:
        try:
            response = await client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –≤–µ–¥–µ—à—å —Å–µ–±—è –∫–∞–∫ –¥—Ä—É–≥ –∏ —Ç–æ–≤–∞—Ä–∏—â. –ü—Ä–∏–≤–æ–¥–∏—à—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"},
                    {"role": "user", "content": user_message}
                ]
            )

            reply = response.choices[0].message.content
            await update.message.reply_text(reply)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI API: {e}")
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    else:
        await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {user_message}")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def go(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_users.add(user_id)
    await update.message.reply_text("üß† –¢—ã –≤–æ—à—ë–ª –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò. –ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ!\n\n–ù–∞–ø–∏—à–∏ /exit —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")

async def exit_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in chat_users:
        chat_users.remove(user_id)
        await update.message.reply_text("‚úÖ –¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è —Å –ò–ò.")
    else:
        await update.message.reply_text("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è —Å –ò–ò.")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("go", go))
    app.add_handler(CommandHandler("exit", exit_chat))
    app.add_handler(CommandHandler("random_skuki", random_skuki))
    app.add_handler(CommandHandler("random_zaryadki", random_zaryadki))
    app.add_handler(CommandHandler("training", start_training_menu))

    app.add_handler(CallbackQueryHandler(handle_day1_workout, pattern='^—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞_–¥–µ–Ω—å1$'))
    app.add_handler(CallbackQueryHandler(handle_day2_workout, pattern='^—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞_–¥–µ–Ω—å2$'))
    app.add_handler(CallbackQueryHandler(handle_day3_workout, pattern='^—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞_–¥–µ–Ω—å3$'))
    app.add_handler(CallbackQueryHandler(handle_day4_workout, pattern='^—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞_–¥–µ–Ω—å4$'))
    app.add_handler(CallbackQueryHandler(handle_warmup_step, pattern=r'^—Ä–∞–∑–º–∏–Ω–∫–∞_—à–∞–≥_\d+_(—Å—Ç–∞—Ä—Ç|–≥–æ—Ç–æ–≤–æ)$'))
    app.add_handler(CallbackQueryHandler(handle_training_day_selection, pattern=r"^—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞[1-4]$"))
    app.add_handler(CallbackQueryHandler(handle_warmup_step, pattern=r"^—Ä–∞–∑–º–∏–Ω–∫–∞[1-4]_—à–∞–≥_\d+_(—Å—Ç–∞—Ä—Ç|–≥–æ—Ç–æ–≤–æ)$"))
    app.add_handler(CallbackQueryHandler(handle_main_step, pattern=r"^—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞[1-4]_—à–∞–≥_\d+_(—Å—Ç–∞—Ä—Ç|–≥–æ—Ç–æ–≤–æ)$"))





    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    await set_commands(app)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ polling...")
    # await app.run_polling()

    await app.run_webhook(
        listen="0.0.0.0",  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≤—Å–µ–º –∞–¥—Ä–µ—Å–∞–º
        port=int(os.getenv("PORT", 5000)),  # –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        url_path=TOKEN,  # –ü—É—Ç—å –∫ —Ç–æ–∫–µ–Ω—É –≤ URL
        webhook_url=f"{WEBHOOK_URL}/{TOKEN}",  # –í–µ–±—Ö—É–∫ URL
    )

if __name__ == "__main__":
    asyncio.run(main())
